[
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageQt",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "LrcFile",
        "importPath": "lyric_decode.lyric_decode",
        "description": "lyric_decode.lyric_decode",
        "isExtraImport": true,
        "detail": "lyric_decode.lyric_decode",
        "documentation": {}
    },
    {
        "label": "KrcFile",
        "importPath": "lyric_decode.lyric_decode",
        "description": "lyric_decode.lyric_decode",
        "isExtraImport": true,
        "detail": "lyric_decode.lyric_decode",
        "documentation": {}
    },
    {
        "label": "KrcFile",
        "importPath": "lyric_decode.lyric_decode",
        "description": "lyric_decode.lyric_decode",
        "isExtraImport": true,
        "detail": "lyric_decode.lyric_decode",
        "documentation": {}
    },
    {
        "label": "SongInfo",
        "importPath": "song_metadata.metadata_type",
        "description": "song_metadata.metadata_type",
        "isExtraImport": true,
        "detail": "song_metadata.metadata_type",
        "documentation": {}
    },
    {
        "label": "SongSearchInfo",
        "importPath": "song_metadata.metadata_type",
        "description": "song_metadata.metadata_type",
        "isExtraImport": true,
        "detail": "song_metadata.metadata_type",
        "documentation": {}
    },
    {
        "label": "SongInfo",
        "importPath": "song_metadata.metadata_type",
        "description": "song_metadata.metadata_type",
        "isExtraImport": true,
        "detail": "song_metadata.metadata_type",
        "documentation": {}
    },
    {
        "label": "SongSearchInfo",
        "importPath": "song_metadata.metadata_type",
        "description": "song_metadata.metadata_type",
        "isExtraImport": true,
        "detail": "song_metadata.metadata_type",
        "documentation": {}
    },
    {
        "label": "SongInfo",
        "importPath": "song_metadata.metadata_type",
        "description": "song_metadata.metadata_type",
        "isExtraImport": true,
        "detail": "song_metadata.metadata_type",
        "documentation": {}
    },
    {
        "label": "SongSearchInfo",
        "importPath": "song_metadata.metadata_type",
        "description": "song_metadata.metadata_type",
        "isExtraImport": true,
        "detail": "song_metadata.metadata_type",
        "documentation": {}
    },
    {
        "label": "SongInfo",
        "importPath": "song_metadata.metadata_type",
        "description": "song_metadata.metadata_type",
        "isExtraImport": true,
        "detail": "song_metadata.metadata_type",
        "documentation": {}
    },
    {
        "label": "SongInfo",
        "importPath": "song_metadata.metadata_type",
        "description": "song_metadata.metadata_type",
        "isExtraImport": true,
        "detail": "song_metadata.metadata_type",
        "documentation": {}
    },
    {
        "label": "SongInfo",
        "importPath": "song_metadata.metadata_type",
        "description": "song_metadata.metadata_type",
        "isExtraImport": true,
        "detail": "song_metadata.metadata_type",
        "documentation": {}
    },
    {
        "label": "SongElseInfo",
        "importPath": "song_metadata.metadata_type",
        "description": "song_metadata.metadata_type",
        "isExtraImport": true,
        "detail": "song_metadata.metadata_type",
        "documentation": {}
    },
    {
        "label": "SongInfo",
        "importPath": "song_metadata.metadata_type",
        "description": "song_metadata.metadata_type",
        "isExtraImport": true,
        "detail": "song_metadata.metadata_type",
        "documentation": {}
    },
    {
        "label": "SongInfo",
        "importPath": "song_metadata.metadata_type",
        "description": "song_metadata.metadata_type",
        "isExtraImport": true,
        "detail": "song_metadata.metadata_type",
        "documentation": {}
    },
    {
        "label": "NoneResultError",
        "importPath": "api.api_error",
        "description": "api.api_error",
        "isExtraImport": true,
        "detail": "api.api_error",
        "documentation": {}
    },
    {
        "label": "NoneResultError",
        "importPath": "api.api_error",
        "description": "api.api_error",
        "isExtraImport": true,
        "detail": "api.api_error",
        "documentation": {}
    },
    {
        "label": "NoneResultError",
        "importPath": "api.api_error",
        "description": "api.api_error",
        "isExtraImport": true,
        "detail": "api.api_error",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QThread",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDialog",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QCheckBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGridLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFileDialog",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSizePolicy",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "Ui_AutoMetadataDialog",
        "importPath": "ui.ui_source.AutoMetadataDialog",
        "description": "ui.ui_source.AutoMetadataDialog",
        "isExtraImport": true,
        "detail": "ui.ui_source.AutoMetadataDialog",
        "documentation": {}
    },
    {
        "label": "MaskWidget",
        "importPath": "components.mask_widget",
        "description": "components.mask_widget",
        "isExtraImport": true,
        "detail": "components.mask_widget",
        "documentation": {}
    },
    {
        "label": "MaskWidget",
        "importPath": "components.mask_widget",
        "description": "components.mask_widget",
        "isExtraImport": true,
        "detail": "components.mask_widget",
        "documentation": {}
    },
    {
        "label": "MaskWidget",
        "importPath": "components.mask_widget",
        "description": "components.mask_widget",
        "isExtraImport": true,
        "detail": "components.mask_widget",
        "documentation": {}
    },
    {
        "label": "MaskWidget",
        "importPath": "components.mask_widget",
        "description": "components.mask_widget",
        "isExtraImport": true,
        "detail": "components.mask_widget",
        "documentation": {}
    },
    {
        "label": "Ui_ModifyDialog",
        "importPath": "ui.ui_source.ModifyDialog",
        "description": "ui.ui_source.ModifyDialog",
        "isExtraImport": true,
        "detail": "ui.ui_source.ModifyDialog",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Ui_SettingDialog",
        "importPath": "ui.ui_source.SettingDialog",
        "description": "ui.ui_source.SettingDialog",
        "isExtraImport": true,
        "detail": "ui.ui_source.SettingDialog",
        "documentation": {}
    },
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "namedtuple",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Ui_WarningDialog",
        "importPath": "ui.ui_source.WarningDialog",
        "description": "ui.ui_source.WarningDialog",
        "isExtraImport": true,
        "detail": "ui.ui_source.WarningDialog",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "MethodType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "codecs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "codecs",
        "description": "codecs",
        "detail": "codecs",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "zlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zlib",
        "description": "zlib",
        "detail": "zlib",
        "documentation": {}
    },
    {
        "label": "fuzz",
        "importPath": "fuzzywuzzy",
        "description": "fuzzywuzzy",
        "isExtraImport": true,
        "detail": "fuzzywuzzy",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "mutagen",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mutagen",
        "description": "mutagen",
        "detail": "mutagen",
        "documentation": {}
    },
    {
        "label": "id3",
        "importPath": "mutagen",
        "description": "mutagen",
        "isExtraImport": true,
        "detail": "mutagen",
        "documentation": {}
    },
    {
        "label": "mp4",
        "importPath": "mutagen",
        "description": "mutagen",
        "isExtraImport": true,
        "detail": "mutagen",
        "documentation": {}
    },
    {
        "label": "flac",
        "importPath": "mutagen",
        "description": "mutagen",
        "isExtraImport": true,
        "detail": "mutagen",
        "documentation": {}
    },
    {
        "label": "MediaInfo",
        "importPath": "pymediainfo",
        "description": "pymediainfo",
        "isExtraImport": true,
        "detail": "pymediainfo",
        "documentation": {}
    },
    {
        "label": "FLAC",
        "importPath": "mutagen.flac",
        "description": "mutagen.flac",
        "isExtraImport": true,
        "detail": "mutagen.flac",
        "documentation": {}
    },
    {
        "label": "TinyTag",
        "importPath": "tinytag",
        "description": "tinytag",
        "isExtraImport": true,
        "detail": "tinytag",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.Qt",
        "description": "PyQt5.Qt",
        "isExtraImport": true,
        "detail": "PyQt5.Qt",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "api",
        "description": "api",
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "compare_song_info",
        "importPath": "song_metadata.compare_metadata",
        "description": "song_metadata.compare_metadata",
        "isExtraImport": true,
        "detail": "song_metadata.compare_metadata",
        "documentation": {}
    },
    {
        "label": "dialog",
        "importPath": "components",
        "description": "components",
        "isExtraImport": true,
        "detail": "components",
        "documentation": {}
    },
    {
        "label": "thread_drive",
        "importPath": "components.work_thread",
        "description": "components.work_thread",
        "isExtraImport": true,
        "detail": "components.work_thread",
        "documentation": {}
    },
    {
        "label": "ApiMode",
        "importPath": "components.dialog.setting_dialog",
        "description": "components.dialog.setting_dialog",
        "isExtraImport": true,
        "detail": "components.dialog.setting_dialog",
        "documentation": {}
    },
    {
        "label": "read_song_metadata",
        "importPath": "song_metadata.read_metadata",
        "description": "song_metadata.read_metadata",
        "isExtraImport": true,
        "detail": "song_metadata.read_metadata",
        "documentation": {}
    },
    {
        "label": "write_song_metadata",
        "importPath": "song_metadata.write_metadata",
        "description": "song_metadata.write_metadata",
        "isExtraImport": true,
        "detail": "song_metadata.write_metadata",
        "documentation": {}
    },
    {
        "label": "Ui_MetadataWidget",
        "importPath": "ui.ui_source.MetadataWidget",
        "description": "ui.ui_source.MetadataWidget",
        "isExtraImport": true,
        "detail": "ui.ui_source.MetadataWidget",
        "documentation": {}
    },
    {
        "label": "MetadataWidget",
        "importPath": "ui.metadata_widget",
        "description": "ui.metadata_widget",
        "isExtraImport": true,
        "detail": "ui.metadata_widget",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"MusicTagger\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"MusicTagger\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"MusicTagger\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"MusicTagger\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"MusicTagger\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "NoneResultError",
        "kind": 6,
        "importPath": "MusicTager.api.api_error",
        "description": "MusicTager.api.api_error",
        "peekOfCode": "class NoneResultError(ValueError):\n    \"\"\"api返回的数据是空（搜索的关键词没有对应的数据）\"\"\"",
        "detail": "MusicTager.api.api_error",
        "documentation": {}
    },
    {
        "label": "CloudMusicWebApi",
        "kind": 6,
        "importPath": "MusicTager.api.cloud_api",
        "description": "MusicTager.api.cloud_api",
        "peekOfCode": "class CloudMusicWebApi:\n    def __init__(self):\n        self._search_url = 'https://music.163.com/api/search/get/web?&s={}&type=1&offset={}&total=true&limit=20'\n        self._song_info_url = 'http://music.163.com/api/song/detail/?id={}&ids=[{}]'\n        self._download_lrc_url = 'http://music.163.com/api/song/lyric?id={}&lv=-1&kv=-1&tv=-1&rv=-1'  # get 需要歌曲id\n    def get_song_info(self, song_id: str) -> SongInfo:\n        \"\"\"\n        Get filtered song information based on song ID in CloudMusic API.\n        :param song_id: song ID in API.\n        :return: Filtered song information in dict.",
        "detail": "MusicTager.api.cloud_api",
        "documentation": {}
    },
    {
        "label": "KugouApi",
        "kind": 6,
        "importPath": "MusicTager.api.kugou_api",
        "description": "MusicTager.api.kugou_api",
        "peekOfCode": "class KugouApi:\n    def __init__(self):\n        # 获取hash值需要搜索关键词。获取access_key和id需要hash值。下载文件需要access_key和id\n        self._get_hash_search_url = 'http://mobilecdn.kugou.com/api/v3/search/song?format=json&keyword={}&page={}&pagesize=20&showtype=1 '\n        self._get_key_search_url = 'http://krcs.kugou.com/search?ver=1&man=yes&client=mobi&keyword=&duration=&hash={}'\n        self._get_lrc_url = 'http://lyrics.kugou.com/download?ver=1&client=pc&id={}&accesskey={}&fmt={}&charset=utf8'\n        self._album_info_url = 'http://mobilecdn.kugou.com/api/v3/album/info?albumid={}&plat=0&pagesize=100&area_code=1'\n        self._song_info_url = 'http://m.kugou.com/app/i/getSongInfo.php?cmd=playInfo&hash={}'\n        self.total_num = 0\n    def search_hash(self, keyword: str, page: object = 1) -> List[SongSearchInfo]:",
        "detail": "MusicTager.api.kugou_api",
        "documentation": {}
    },
    {
        "label": "header",
        "kind": 5,
        "importPath": "MusicTager.api.kugou_api",
        "description": "MusicTager.api.kugou_api",
        "peekOfCode": "header = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:7.0a1) Gecko/20110623 Firefox/7.0a1 Fennec/7.0a1'}\nclass KugouApi:\n    def __init__(self):\n        # 获取hash值需要搜索关键词。获取access_key和id需要hash值。下载文件需要access_key和id\n        self._get_hash_search_url = 'http://mobilecdn.kugou.com/api/v3/search/song?format=json&keyword={}&page={}&pagesize=20&showtype=1 '\n        self._get_key_search_url = 'http://krcs.kugou.com/search?ver=1&man=yes&client=mobi&keyword=&duration=&hash={}'\n        self._get_lrc_url = 'http://lyrics.kugou.com/download?ver=1&client=pc&id={}&accesskey={}&fmt={}&charset=utf8'\n        self._album_info_url = 'http://mobilecdn.kugou.com/api/v3/album/info?albumid={}&plat=0&pagesize=100&area_code=1'\n        self._song_info_url = 'http://m.kugou.com/app/i/getSongInfo.php?cmd=playInfo&hash={}'\n        self.total_num = 0",
        "detail": "MusicTager.api.kugou_api",
        "documentation": {}
    },
    {
        "label": "SpotifyAuth",
        "kind": 6,
        "importPath": "MusicTager.api.spotify_api",
        "description": "MusicTager.api.spotify_api",
        "peekOfCode": "class SpotifyAuth:\n    AUTH_AUTHORIZE_URL = \"https://accounts.spotify.com/authorize\"\n    AUTH_TOKEN_URL = \"https://accounts.spotify.com/api/token\"\n    def __init__(self, client_id, client_secret):\n        self.token_info = None\n        self.client_id = client_id\n        self.client_secret = client_secret\n        auth = base64.b64encode((CLIENT_ID + \":\" + CLIENT_SECRET).encode(\"ascii\"))\n        self.auth_header = {'Authorization': 'Basic ' + auth.decode(\"ascii\")}\n        self._fetch_access_token()",
        "detail": "MusicTager.api.spotify_api",
        "documentation": {}
    },
    {
        "label": "SpotifyApi",
        "kind": 6,
        "importPath": "MusicTager.api.spotify_api",
        "description": "MusicTager.api.spotify_api",
        "peekOfCode": "class SpotifyApi:\n    SEARCH_URL = \"https://api.spotify.com/v1/search\"\n    def __init__(self):\n        self.auth = SpotifyAuth(CLIENT_ID, CLIENT_SECRET)\n        self.header = {\"Authorization\": \"Bearer {0}\".format(self.auth.get_token()),\n                       \"Content-Type\": \"application/json\"}\n        self.session = requests.session()\n    def search_data(self, keyword: str, offset: int = 0, limit=10):\n        keyword = re.sub(r\"|[!@#$%^&*/]+\", \"\", keyword)\n        params = {",
        "detail": "MusicTager.api.spotify_api",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": "MusicTager.api.spotify_api",
        "description": "MusicTager.api.spotify_api",
        "peekOfCode": "CLIENT_ID = '2fa0e4d172014c33809ff17e526d8559'\nCLIENT_SECRET = '0e7d3cfe97794639966683001ca45eec'\nclass SpotifyAuth:\n    AUTH_AUTHORIZE_URL = \"https://accounts.spotify.com/authorize\"\n    AUTH_TOKEN_URL = \"https://accounts.spotify.com/api/token\"\n    def __init__(self, client_id, client_secret):\n        self.token_info = None\n        self.client_id = client_id\n        self.client_secret = client_secret\n        auth = base64.b64encode((CLIENT_ID + \":\" + CLIENT_SECRET).encode(\"ascii\"))",
        "detail": "MusicTager.api.spotify_api",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": "MusicTager.api.spotify_api",
        "description": "MusicTager.api.spotify_api",
        "peekOfCode": "CLIENT_SECRET = '0e7d3cfe97794639966683001ca45eec'\nclass SpotifyAuth:\n    AUTH_AUTHORIZE_URL = \"https://accounts.spotify.com/authorize\"\n    AUTH_TOKEN_URL = \"https://accounts.spotify.com/api/token\"\n    def __init__(self, client_id, client_secret):\n        self.token_info = None\n        self.client_id = client_id\n        self.client_secret = client_secret\n        auth = base64.b64encode((CLIENT_ID + \":\" + CLIENT_SECRET).encode(\"ascii\"))\n        self.auth_header = {'Authorization': 'Basic ' + auth.decode(\"ascii\")}",
        "detail": "MusicTager.api.spotify_api",
        "documentation": {}
    },
    {
        "label": "AutoMetadataDialog",
        "kind": 6,
        "importPath": "MusicTager.components.dialog.auto_meatadata_dialog",
        "description": "MusicTager.components.dialog.auto_meatadata_dialog",
        "peekOfCode": "class AutoMetadataDialog(QDialog, Ui_AutoMetadataDialog):\n    add_signal = pyqtSignal(str)\n    prepare_close_signal = pyqtSignal(str)\n    def __init__(self, parent=None):\n        super(AutoMetadataDialog, self).__init__(parent)\n        self.setupUi(self)\n        self.add_signal.connect(self.value_add)\n        self.prepare_close_signal.connect(self.prepare_reject)\n    def set_max(self, maximum):\n        self.progressBar.setMaximum(maximum)",
        "detail": "MusicTager.components.dialog.auto_meatadata_dialog",
        "documentation": {}
    },
    {
        "label": "BatchModifyDialog",
        "kind": 6,
        "importPath": "MusicTager.components.dialog.batch_modify_dialog",
        "description": "MusicTager.components.dialog.batch_modify_dialog",
        "peekOfCode": "class BatchModifyDialog(QDialog):\n    \"\"\"\n    一个用于批量修改音乐文件元数据的对话框。\n    \"\"\"\n    def __init__(self, parent=None):\n        \"\"\"\n        初始化对话框，创建并布局所有UI组件。\n        \"\"\"\n        super().__init__(parent)\n        self.setWindowTitle(\"批量修改\")",
        "detail": "MusicTager.components.dialog.batch_modify_dialog",
        "documentation": {}
    },
    {
        "label": "ModifyDialog",
        "kind": 6,
        "importPath": "MusicTager.components.dialog.modify_dialog",
        "description": "MusicTager.components.dialog.modify_dialog",
        "peekOfCode": "class ModifyDialog(QDialog, Ui_ModifyDialog):\n    done_signal = pyqtSignal(SongInfo, str)\n    def __init__(self, parent=None):\n        super(ModifyDialog, self).__init__(parent)\n        self.setupUi(self)\n        self._init_signal()\n        self._init_setting()\n        self.pic_path = \"\"\n    def _init_signal(self):\n        self.upload_pic_button.clicked.connect(self.upload_pic_event)",
        "detail": "MusicTager.components.dialog.modify_dialog",
        "documentation": {}
    },
    {
        "label": "ApiMode",
        "kind": 6,
        "importPath": "MusicTager.components.dialog.setting_dialog",
        "description": "MusicTager.components.dialog.setting_dialog",
        "peekOfCode": "class ApiMode(Enum):\n    CLOUD = 0\n    KUGOU = 1\n    SPOTIFY = 2\nclass SettingDialog(QDialog, Ui_SettingDialog):\n    done_signal = pyqtSignal(Setting)\n    def __init__(self, parent=None):\n        super(SettingDialog, self).__init__(parent)\n        self.setupUi(self)\n        self.auto_if = False",
        "detail": "MusicTager.components.dialog.setting_dialog",
        "documentation": {}
    },
    {
        "label": "SettingDialog",
        "kind": 6,
        "importPath": "MusicTager.components.dialog.setting_dialog",
        "description": "MusicTager.components.dialog.setting_dialog",
        "peekOfCode": "class SettingDialog(QDialog, Ui_SettingDialog):\n    done_signal = pyqtSignal(Setting)\n    def __init__(self, parent=None):\n        super(SettingDialog, self).__init__(parent)\n        self.setupUi(self)\n        self.auto_if = False\n        # 加载配置\n        self._load_config()\n        # 信号初始化\n        self._init_signal()",
        "detail": "MusicTager.components.dialog.setting_dialog",
        "documentation": {}
    },
    {
        "label": "Setting",
        "kind": 5,
        "importPath": "MusicTager.components.dialog.setting_dialog",
        "description": "MusicTager.components.dialog.setting_dialog",
        "peekOfCode": "Setting = namedtuple(\"Setting\", [\"api_mode\", \"is_lrc\", \"is_rename\", \"auto_if\"])\nCONFIG_PATH = os.path.join(os.path.dirname(__file__), '..', '..', 'config.json')\nclass ApiMode(Enum):\n    CLOUD = 0\n    KUGOU = 1\n    SPOTIFY = 2\nclass SettingDialog(QDialog, Ui_SettingDialog):\n    done_signal = pyqtSignal(Setting)\n    def __init__(self, parent=None):\n        super(SettingDialog, self).__init__(parent)",
        "detail": "MusicTager.components.dialog.setting_dialog",
        "documentation": {}
    },
    {
        "label": "CONFIG_PATH",
        "kind": 5,
        "importPath": "MusicTager.components.dialog.setting_dialog",
        "description": "MusicTager.components.dialog.setting_dialog",
        "peekOfCode": "CONFIG_PATH = os.path.join(os.path.dirname(__file__), '..', '..', 'config.json')\nclass ApiMode(Enum):\n    CLOUD = 0\n    KUGOU = 1\n    SPOTIFY = 2\nclass SettingDialog(QDialog, Ui_SettingDialog):\n    done_signal = pyqtSignal(Setting)\n    def __init__(self, parent=None):\n        super(SettingDialog, self).__init__(parent)\n        self.setupUi(self)",
        "detail": "MusicTager.components.dialog.setting_dialog",
        "documentation": {}
    },
    {
        "label": "WarningDialog",
        "kind": 6,
        "importPath": "MusicTager.components.dialog.warning_dialog",
        "description": "MusicTager.components.dialog.warning_dialog",
        "peekOfCode": "class WarningDialog(QDialog, Ui_WarningDialog):\n    def __init__(self, parent=None):\n        super(WarningDialog, self).__init__(parent)\n        self.setupUi(self)\n        self.warning_label.setWordWrap(True)\n    def set_text(self, msg):\n        self.warning_label.setText(msg)\n        self.adjustSize()\n    def show(self) -> None:\n        self._set_mask_visible(True)",
        "detail": "MusicTager.components.dialog.warning_dialog",
        "documentation": {}
    },
    {
        "label": "InfoLabel",
        "kind": 6,
        "importPath": "MusicTager.components.info_label",
        "description": "MusicTager.components.info_label",
        "peekOfCode": "class InfoLabel(QLabel):\n    def __init__(self, parent=None):\n        super(InfoLabel, self).__init__(parent=parent)\n        self.setTextInteractionFlags(Qt.TextSelectableByMouse)  # 设置label可复制\n        self.metrics = QFontMetrics(self.font())\n    def put_text(self, text: str):\n        text = text if text else \"N/A\"\n        new_text = self.metrics.elidedText(text, Qt.ElideRight, self.width())\n        self.setText(new_text)",
        "detail": "MusicTager.components.info_label",
        "documentation": {}
    },
    {
        "label": "MaskWidget",
        "kind": 6,
        "importPath": "MusicTager.components.mask_widget",
        "description": "MusicTager.components.mask_widget",
        "peekOfCode": "class MaskWidget(QWidget):\n    def __init__(self, parent=None):\n        super(MaskWidget, self).__init__(parent=parent)\n        self.setWindowFlag(Qt.FramelessWindowHint, True)\n        self.setAttribute(Qt.WA_StyledBackground)\n        self.setStyleSheet('background:rgba(0,0,0,102);')\n        self.setAttribute(Qt.WA_DeleteOnClose)\n    def show(self):\n        \"\"\"重写show，设置遮罩大小与parent一致\"\"\"\n        if self.parent() is None:",
        "detail": "MusicTager.components.mask_widget",
        "documentation": {}
    },
    {
        "label": "WorkThread",
        "kind": 6,
        "importPath": "MusicTager.components.work_thread",
        "description": "MusicTager.components.work_thread",
        "peekOfCode": "class WorkThread(QThread):\n    thread_all_done_signal = pyqtSignal(object)\n    done_signal = pyqtSignal(object)\n    _running_num = 0\n    def __init__(self, work_func, *args, **kwargs):\n        super(WorkThread, self).__init__()\n        self.work = partial(work_func, *args, **kwargs)\n    def work(self):\n        raise NotImplementedError(\"The 'work' function has not been set\")\n    def run(self):",
        "detail": "MusicTager.components.work_thread",
        "documentation": {}
    },
    {
        "label": "thread_drive",
        "kind": 2,
        "importPath": "MusicTager.components.work_thread",
        "description": "MusicTager.components.work_thread",
        "peekOfCode": "def thread_drive(done_emit_func):\n    \"\"\"修饰线程驱动的类成员函数（槽函数必须依附于设置槽函数的线程）\"\"\"\n    def outer(func):\n        @wraps(func)\n        def wrapper(self, *args, **kwargs):\n            work_thread = WorkThread(func, self, *args, **kwargs)\n            if hasattr(self, 'threads') and isinstance(self.threads, list):\n                self.threads.append(work_thread)\n                work_thread.finished.connect(lambda: self.threads.remove(work_thread))\n            if done_emit_func:",
        "detail": "MusicTager.components.work_thread",
        "documentation": {}
    },
    {
        "label": "LrcFile",
        "kind": 6,
        "importPath": "MusicTager.lyric_decode.lyric_decode",
        "description": "MusicTager.lyric_decode.lyric_decode",
        "peekOfCode": "class LrcFile:\n    def __init__(self, file_path=None, lrc_type='non'):\n        self.trans_non_dict = {}\n        self.trans_romaji_dict = {}\n        self.trans_chinese_dict = {}\n        if file_path:\n            self.load_file_path(file_path, lrc_type)\n    def __select_lrc_type(self, lrc_type: str) -> dict:\n        \"\"\"\n        Get the bound dict.",
        "detail": "MusicTager.lyric_decode.lyric_decode",
        "documentation": {}
    },
    {
        "label": "KrcFile",
        "kind": 6,
        "importPath": "MusicTager.lyric_decode.lyric_decode",
        "description": "MusicTager.lyric_decode.lyric_decode",
        "peekOfCode": "class KrcFile(LrcFile):\n    \"\"\"\n    Read KRC files and decode them\n    \"\"\"\n    @staticmethod\n    def __decode(file_data: bytes, sec_decimal: int = 3) -> str:\n        \"\"\"\n        Decoding KRC\n        :param file_data: Specifies the data to read\n        :param sec_decimal: The number of seconds inside the file",
        "detail": "MusicTager.lyric_decode.lyric_decode",
        "documentation": {}
    },
    {
        "label": "MrcFile",
        "kind": 6,
        "importPath": "MusicTager.lyric_decode.lyric_decode",
        "description": "MusicTager.lyric_decode.lyric_decode",
        "peekOfCode": "class MrcFile(LrcFile):\n    def load_content(self, content: str, lrc_type: str) -> bool:\n        file_data = content.splitlines()\n        lrc_content = ''\n        lrc_type = ''\n        for line in file_data:\n            res = re.match(r\"-\\*- type:(.*) -\\*-\", line)\n            if res:\n                if lrc_content and lrc_type:\n                    super(MrcFile, self).load_content(lrc_content, lrc_type)",
        "detail": "MusicTager.lyric_decode.lyric_decode",
        "documentation": {}
    },
    {
        "label": "compare_song_info",
        "kind": 2,
        "importPath": "MusicTager.song_metadata.compare_metadata",
        "description": "MusicTager.song_metadata.compare_metadata",
        "peekOfCode": "def compare_song_info(song_info_1: SongInfo, song_info_2: SongInfo) -> int:\n    \"\"\"对比两个歌曲元数据，返回相似度评分\"\"\"\n    if not song_info_1 or not song_info_2:\n        return 0\n    duration_1 = __parse_duration(song_info_1.duration)\n    duration_2 = __parse_duration(song_info_2.duration)\n    score_list = []\n    if duration_1 and duration_2:\n        if abs(duration_1 - duration_2) <= 1:\n            score_list.append(100)",
        "detail": "MusicTager.song_metadata.compare_metadata",
        "documentation": {}
    },
    {
        "label": "SongInfo",
        "kind": 5,
        "importPath": "MusicTager.song_metadata.metadata_type",
        "description": "MusicTager.song_metadata.metadata_type",
        "peekOfCode": "SongInfo = collections.namedtuple(\"SongInfo\",\n                                  [\"singer\",\n                                   \"songName\",\n                                   \"album\",\n                                   \"year\",\n                                   \"trackNumber\",\n                                   \"duration\",\n                                   \"genre\",\n                                   \"picBuffer\",\n                                   \"lyric\"])",
        "detail": "MusicTager.song_metadata.metadata_type",
        "documentation": {}
    },
    {
        "label": "SongElseInfo",
        "kind": 5,
        "importPath": "MusicTager.song_metadata.metadata_type",
        "description": "MusicTager.song_metadata.metadata_type",
        "peekOfCode": "SongElseInfo = collections.namedtuple(\n    \"SongElseInfo\", [\n        \"songPath\", \"suffix\", \"coverName\", \"createTime\", \"modifiedTime\", \"md5\"])\nSongSearchInfo = collections.namedtuple(\n    \"SongSearchInfo\", [\n        \"songName\", \"singer\", \"duration\", \"idOrMd5\"])\nif __name__ == \"__main__\":\n    pass",
        "detail": "MusicTager.song_metadata.metadata_type",
        "documentation": {}
    },
    {
        "label": "SongSearchInfo",
        "kind": 5,
        "importPath": "MusicTager.song_metadata.metadata_type",
        "description": "MusicTager.song_metadata.metadata_type",
        "peekOfCode": "SongSearchInfo = collections.namedtuple(\n    \"SongSearchInfo\", [\n        \"songName\", \"singer\", \"duration\", \"idOrMd5\"])\nif __name__ == \"__main__\":\n    pass",
        "detail": "MusicTager.song_metadata.metadata_type",
        "documentation": {}
    },
    {
        "label": "get_md5",
        "kind": 2,
        "importPath": "MusicTager.song_metadata.read_metadata",
        "description": "MusicTager.song_metadata.read_metadata",
        "peekOfCode": "def get_md5(file: str) -> str:\n    \"\"\"获取文件的md5值\"\"\"\n    m = hashlib.md5()\n    with open(file, 'rb') as f:\n        for line in f:\n            m.update(line)\n    md5code = m.hexdigest()\n    return md5code\ndef get_album_buffer(path: str) -> io.BytesIO:\n    \"\"\"获取文件的封面数据，并保存到io缓冲\"\"\"",
        "detail": "MusicTager.song_metadata.read_metadata",
        "documentation": {}
    },
    {
        "label": "get_album_buffer",
        "kind": 2,
        "importPath": "MusicTager.song_metadata.read_metadata",
        "description": "MusicTager.song_metadata.read_metadata",
        "peekOfCode": "def get_album_buffer(path: str) -> io.BytesIO:\n    \"\"\"获取文件的封面数据，并保存到io缓冲\"\"\"\n    if not os.path.exists(path):\n        raise FileNotFoundError(f\"No such file or directory: '{path}', can't get pic buffer.\")\n    buffer = io.BytesIO()\n    suffix = os.path.splitext(path)[1]\n    if suffix == '.mp3':\n        inf = mutagen.File(path)\n        artwork = b''\n        if not inf.tags:",
        "detail": "MusicTager.song_metadata.read_metadata",
        "documentation": {}
    },
    {
        "label": "read_song_metadata",
        "kind": 2,
        "importPath": "MusicTager.song_metadata.read_metadata",
        "description": "MusicTager.song_metadata.read_metadata",
        "peekOfCode": "def read_song_metadata(path: str) -> (SongInfo, SongElseInfo):\n    \"\"\"获取文件的元数据\"\"\"\n    audio = mutagen.File(path)\n    tag = TinyTag.get(path)\n    suffix = os.path.splitext(path)[-1]\n    file_name = os.path.splitext(os.path.basename(path))[0]\n    create_time = time.strftime('%Y-%m-%dT%H:%M:%S', time.localtime(os.path.getctime(path)))\n    modified_time = time.strftime('%Y-%m-%dT%H:%M:%S', time.localtime(os.path.getmtime(path)))\n    duration = tag.duration\n    if path.endswith(\"m4a\") or path.endswith(\"mp4\"):",
        "detail": "MusicTager.song_metadata.read_metadata",
        "documentation": {}
    },
    {
        "label": "write_song_metadata",
        "kind": 2,
        "importPath": "MusicTager.song_metadata.write_metadata",
        "description": "MusicTager.song_metadata.write_metadata",
        "peekOfCode": "def write_song_metadata(song_path: str, song_info: SongInfo, pic_path: str = None) -> tuple:\n    \"\"\"\n    判断目标文件的格式，若格式错误则调整，并返回调整前后的格式\n    :return: 若文件格式错标，则返回原格式和错标格式\n    \"\"\"\n    suffix = os.path.splitext(song_path)[-1]\n    try:\n        if suffix == \".flac\":\n            write_flac_metadata(song_path, song_info, pic_path)\n        elif suffix == \".mp3\":",
        "detail": "MusicTager.song_metadata.write_metadata",
        "documentation": {}
    },
    {
        "label": "write_flac_metadata",
        "kind": 2,
        "importPath": "MusicTager.song_metadata.write_metadata",
        "description": "MusicTager.song_metadata.write_metadata",
        "peekOfCode": "def write_flac_metadata(song_path: str, song_info: SongInfo, pic_path: str = None):\n    \"\"\"为flac文件写入元数据标签 pic_path为封面图片，格式要求为png或者jpg\"\"\"\n    audio = flac.FLAC(song_path)\n    if song_info.songName:\n        audio[\"TITLE\"] = song_info.songName\n    if song_info.singer:\n        audio[\"ARTIST\"] = song_info.singer\n        audio[\"ALBUMARIST\"] = song_info.singer\n    if song_info.album:\n        audio[\"ALBUM\"] = song_info.album",
        "detail": "MusicTager.song_metadata.write_metadata",
        "documentation": {}
    },
    {
        "label": "write_mp3_metadata",
        "kind": 2,
        "importPath": "MusicTager.song_metadata.write_metadata",
        "description": "MusicTager.song_metadata.write_metadata",
        "peekOfCode": "def write_mp3_metadata(song_path: str, song_info: SongInfo, pic_path: str = None):\n    \"\"\"为mp3文件写入ID3标签 pic_path为封面图片，格式要求为png或者jpg\"\"\"\n    audio = id3.ID3(song_path)\n    if song_info.songName:\n        audio[\"TIT2\"] = id3.TIT2(text=song_info.songName)\n    if song_info.singer:\n        audio[\"TPE1\"] = id3.TPE1(text=song_info.singer)\n    if song_info.album:\n        audio[\"TALB\"] = id3.TALB(text=song_info.album)\n    if song_info.trackNumber:",
        "detail": "MusicTager.song_metadata.write_metadata",
        "documentation": {}
    },
    {
        "label": "write_mp4_metadata",
        "kind": 2,
        "importPath": "MusicTager.song_metadata.write_metadata",
        "description": "MusicTager.song_metadata.write_metadata",
        "peekOfCode": "def write_mp4_metadata(song_path: str, song_info: SongInfo, pic_path: str = None):\n    \"\"\"为mp4，m4a等mp4容器写入元数据标签 pic_path为封面图片，格式要求为png或者jpg \"\"\"\n    audio = mp4.MP4(song_path)\n    if song_info.songName:\n        audio[\"\\xa9nam\"] = song_info.songName\n    if song_info.singer:\n        audio[\"\\xa9ART\"] = song_info.singer\n        audio[\"aART\"] = song_info.singer\n    if song_info.year:\n        audio[\"\\xa9day\"] = song_info.year",
        "detail": "MusicTager.song_metadata.write_metadata",
        "documentation": {}
    },
    {
        "label": "Ui_AutoMetadataDialog",
        "kind": 6,
        "importPath": "MusicTager.ui.ui_source.AutoMetadataDialog",
        "description": "MusicTager.ui.ui_source.AutoMetadataDialog",
        "peekOfCode": "class Ui_AutoMetadataDialog(object):\n    def setupUi(self, AutoMetadataDialog):\n        AutoMetadataDialog.setObjectName(\"AutoMetadataDialog\")\n        AutoMetadataDialog.resize(389, 125)\n        font = QtGui.QFont()\n        font.setFamily(\"微软雅黑\")\n        font.setPointSize(4)\n        AutoMetadataDialog.setFont(font)\n        self.verticalLayout = QtWidgets.QVBoxLayout(AutoMetadataDialog)\n        self.verticalLayout.setSpacing(14)",
        "detail": "MusicTager.ui.ui_source.AutoMetadataDialog",
        "documentation": {}
    },
    {
        "label": "Ui_MetadataWidget",
        "kind": 6,
        "importPath": "MusicTager.ui.ui_source.MetadataWidget",
        "description": "MusicTager.ui.ui_source.MetadataWidget",
        "peekOfCode": "class Ui_MetadataWidget(object):\n    def setupUi(self, MetadataWidget):\n        MetadataWidget.setObjectName(\"MetadataWidget\")\n        MetadataWidget.resize(850, 650)\n        main_layout = QtWidgets.QHBoxLayout(MetadataWidget)\n        main_layout.setContentsMargins(10, 10, 10, 10)\n        main_layout.setSpacing(10)\n        # Left Panel\n        left_panel = QtWidgets.QVBoxLayout()\n        left_panel.setSpacing(5)",
        "detail": "MusicTager.ui.ui_source.MetadataWidget",
        "documentation": {}
    },
    {
        "label": "Ui_ModifyDialog",
        "kind": 6,
        "importPath": "MusicTager.ui.ui_source.ModifyDialog",
        "description": "MusicTager.ui.ui_source.ModifyDialog",
        "peekOfCode": "class Ui_ModifyDialog(object):\n    def setupUi(self, ModifyDialog):\n        ModifyDialog.setObjectName(\"ModifyDialog\")\n        ModifyDialog.resize(400, 300)\n        font = QtGui.QFont()\n        font.setFamily(\"微软雅黑\")\n        font.setPointSize(13)\n        ModifyDialog.setFont(font)\n        self.verticalLayout = QtWidgets.QVBoxLayout(ModifyDialog)\n        self.verticalLayout.setObjectName(\"verticalLayout\")",
        "detail": "MusicTager.ui.ui_source.ModifyDialog",
        "documentation": {}
    },
    {
        "label": "Ui_SettingDialog",
        "kind": 6,
        "importPath": "MusicTager.ui.ui_source.SettingDialog",
        "description": "MusicTager.ui.ui_source.SettingDialog",
        "peekOfCode": "class Ui_SettingDialog(object):\n    def setupUi(self, MetadataDialogSetting):\n        MetadataDialogSetting.setObjectName(\"MetadataDialogSetting\")\n        MetadataDialogSetting.resize(400, 221)\n        font = QtGui.QFont()\n        font.setFamily(\"微软雅黑\")\n        font.setPointSize(13)\n        MetadataDialogSetting.setFont(font)\n        self.verticalLayout = QtWidgets.QVBoxLayout(MetadataDialogSetting)\n        self.verticalLayout.setObjectName(\"verticalLayout\")",
        "detail": "MusicTager.ui.ui_source.SettingDialog",
        "documentation": {}
    },
    {
        "label": "Ui_WarningDialog",
        "kind": 6,
        "importPath": "MusicTager.ui.ui_source.WarningDialog",
        "description": "MusicTager.ui.ui_source.WarningDialog",
        "peekOfCode": "class Ui_WarningDialog(object):\n    def setupUi(self, WarningDialog):\n        WarningDialog.setObjectName(\"WarningDialog\")\n        WarningDialog.resize(199, 133)\n        self.verticalLayout = QtWidgets.QVBoxLayout(WarningDialog)\n        self.verticalLayout.setObjectName(\"verticalLayout\")\n        self.warning_label = QtWidgets.QLabel(WarningDialog)\n        font = QtGui.QFont()\n        font.setFamily(\"微软雅黑\")\n        font.setPointSize(20)",
        "detail": "MusicTager.ui.ui_source.WarningDialog",
        "documentation": {}
    },
    {
        "label": "MetadataWidget",
        "kind": 6,
        "importPath": "MusicTager.ui.metadata_widget",
        "description": "MusicTager.ui.metadata_widget",
        "peekOfCode": "class MetadataWidget(QWidget, Ui_MetadataWidget):\n    warning_dialog_show_signal = pyqtSignal(str)\n    auto_dialog_show_signal = pyqtSignal(str)\n    progress_update_signal = pyqtSignal(int)\n    def __init__(self, parent=None):\n        super(MetadataWidget, self).__init__(parent)\n        self.setupUi(self)\n        self._load_stylesheet()\n        self.threads = []  # 用于跟踪所有工作线程\n        self._init_dialogs()",
        "detail": "MusicTager.ui.metadata_widget",
        "documentation": {}
    },
    {
        "label": "LRC_PATH",
        "kind": 5,
        "importPath": "MusicTager.ui.metadata_widget",
        "description": "MusicTager.ui.metadata_widget",
        "peekOfCode": "LRC_PATH = \"download\\\\\"\nclass MetadataWidget(QWidget, Ui_MetadataWidget):\n    warning_dialog_show_signal = pyqtSignal(str)\n    auto_dialog_show_signal = pyqtSignal(str)\n    progress_update_signal = pyqtSignal(int)\n    def __init__(self, parent=None):\n        super(MetadataWidget, self).__init__(parent)\n        self.setupUi(self)\n        self._load_stylesheet()\n        self.threads = []  # 用于跟踪所有工作线程",
        "detail": "MusicTager.ui.metadata_widget",
        "documentation": {}
    }
]